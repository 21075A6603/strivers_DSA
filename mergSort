// merge sort first dive and merge:
#include<bits/stdc++.h>
using namespace std;

void merge(vector<int> &arr,int low,int mid,int high){
    vector<int> temp;
    int left=low;
    int right=mid+1;
    while(left<=mid && right<=high){
        if(arr[left]<=arr[right]){
            temp.push_back(arr[left]);
            left++;
        }
        else{
            temp.push_back(arr[right]);
            right++;
        }
    }
    // for remaining elements in the left half of the array for comparing wit right array:
    while(left<=mid){
        temp.push_back(arr[left]);
        left++;
    }
    // for right array if thier any remaining elemets to compare with left array:
    while(right<=high){
        temp.push_back(arr[right]);
        right++;
    }
    for(int i=low;i<=high;i++){
        arr[i]=temp[i-low];
    }
}
void mergeSort(vector<int> &arr,int low,int high){
    if(low>=high) return;
    
    int mid=(low+high)/2;
    
    mergeSort(arr,low,mid);//for left division
    mergeSort(arr,mid+1,high);//for right division
    
    // for mergding the divided array after the sorting
    merge(arr,low,mid,high);
}

int main(){
    vector<int> arr{4, 2 ,6 ,3 ,4 ,7 ,8, 9 ,10, 0 };
    int size=10;
    cout<<"actual elements:"<<endl;
    for(int i=0;i<size;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    mergeSort(arr,0,size-1);
    
    cout<<"after the merge sort:"<<endl;
    for(int i=0;i<size;i++){
        cout<<arr[i]<<" ";
    }
    return 0;
    
}
